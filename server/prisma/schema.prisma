// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // The 'output' line has been removed. Prisma will now generate the client
  // to the default, correct location: node_modules/@prisma/client
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  userId            Int     @id @default(autoincrement())
  username          String  @unique
  cognitoId         String  @unique
  email             String  @unique // FIX: Added the essential 'email' field
  profilePictureUrl String?
  teamId            Int?

  authoredTasks  Task[]           @relation("TaskAuthor")
  assignedTasks  Task[]           @relation("TaskAssignoee")
  taskAssignment TaskAssignment[]
  attachments    Attachment[]
  comments       Comment[]
  team           Team?            @relation(fields: [teamId], references: [id])

  Task Task[] @relation("TaskAssignee")
}

model Team {
  id                 Int           @id @default(autoincrement())
  teamname           String
  productOwnerUserId Int?
  projectTeams       ProjectTeam[]
  tasks              Task[]        @relation("TeamTasks")
  projectTasks       Task[]        @relation("TeamProjectTasks")
  users              User[]
}

model Project {
  id           Int           @id @default(autoincrement())
  teamname     String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  projectTeams ProjectTeam[]
  Task         Task[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  projectId Int
  teamId    Int
  project   Project @relation(fields: [projectId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])
}

model Task {
  id             Int              @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String
  tags           String
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int
  authorUserId   Int
  teamId         Int?             @map("teamId")
  project        Project          @relation(fields: [projectId], references: [id])
  assignedUserId Int?
  author         User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee       User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignment TaskAssignment[]
  attachments    Attachment[]
  comments       Comment[]
  team           Team?            @relation("TeamTasks", fields: [teamId], references: [id])
  Team           Team[]           @relation("TeamProjectTasks")

  User User[] @relation("TaskAssignoee")
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int
  user   User @relation(fields: [userId], references: [userId])
  task   Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int
  task         Task @relation(fields: [taskId], references: [id])
  uploadedBy   User @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int
  task   Task @relation(fields: [taskId], references: [id])
  user   User @relation(fields: [userId], references: [userId])
}
